@page
@model admin_chinatsuservices.Pages.ServicePannelModel
@{
    ViewData["Title"] = "Service Pannel";
}

<form id="antiforgery-form" method="post">
    @Html.AntiForgeryToken()
</form>


<style>
    /* ---------------------------------- */
    /* Global Styles             */
    /* ---------------------------------- */
    :root {
        --primary-text: #e0e6f1;
        --secondary-text: #96a5bb;
        --background-primary: #1e1e2d;
        --background-secondary: #27293d;
        --card-bg: #2b2e42;
        --border-color: #3f4561;
        --accent-color: #4b80e8;
        --shadow-light: rgba(0, 0, 0, 0.1);
        --shadow-dark: rgba(0, 0, 0, 0.4);
        --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    body {
        font-family: var(--font-sans);
        background-color: var(--background-primary);
        color: var(--primary-text);
        margin: 0;
        padding-top: 0; /* Only top padding */
        padding-left: 0;
        padding-right: 0;
        padding-bottom: 0;
        line-height: 1.6;
    }

    /* ---------------------------------- */
    /* Layout & Typography       */
    /* ---------------------------------- */
    .header {
        text-align: center;
        margin-bottom: 50px;
    }

    h1 {
        font-weight: 200;
        font-size: 2.5rem;
        letter-spacing: 1px;
        margin: 0;
    }

    .dashboard-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 30px;
        max-width: 1400px;
        margin: 0 auto;
        margin-bottom: 100px;
        margin-top: 30px;
    }

    /* ---------------------------------- */
    /* Service Cards             */
    /* ---------------------------------- */
    .service-card {
        background: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        box-shadow: 0 4px 15px var(--shadow-dark);
        padding: 25px;
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        min-height: 150px;
        position: relative;
        cursor: pointer;
    }

        .service-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px var(--shadow-dark);
        }

        .service-card h2 {
            font-size: 1.5em;
            margin-top: 0;
            margin-bottom: 15px;
            color: var(--primary-text);
            font-weight: 500;
        }

        .service-card p {
            margin: 5px 0;
            font-size: 0.9em;
            color: var(--secondary-text);
        }

        .service-card .status-indicator {
            position: absolute;
            top: 25px;
            right: 25px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid var(--card-bg);
        }

    .status-online .status-indicator {
        background-color: #2ecc71;
    }

    .status-offline .status-indicator {
        background-color: #e74c3c;
    }

    .status-unknown .status-indicator {
        background-color: #f39c12;
    }

    .status-online {
        border-left: 5px solid #2ecc71;
    }

    .status-offline {
        border-left: 5px solid #e74c3c;
    }

    .status-unknown {
        border-left: 5px solid #f39c12;
    }

    .status-text {
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-online .status-text {
        color: #2ecc71;
    }

    .status-offline .status-text {
        color: #e74c3c;
    }

    .status-unknown .status-text {
        color: #f39c12;
    }

    /* ---------------------------------- */
    /* Add Service Card          */
    /* ---------------------------------- */
    .add-card {
        text-align: center;
        border: 2px dashed var(--border-color);
        background-color: var(--background-secondary);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        transition: border-color 0.3s ease-in-out, background-color 0.3s ease-in-out;
        box-shadow: none;
    }

        .add-card:hover {
            border-color: var(--accent-color);
            background-color: #31354a;
        }

    .add-icon {
        font-size: 3.5em;
        line-height: 1;
        color: var(--accent-color);
        margin-bottom: 10px;
        transition: color 0.3s ease-in-out;
    }

    .add-card:hover .add-icon {
        color: #6a9cf0;
    }

    .add-card p {
        font-weight: 500;
        color: var(--secondary-text);
        transition: color 0.3s ease-in-out;
    }

    .add-card:hover p {
        color: var(--primary-text);
    }

    /* ---------------------------------- */
    /* Context Menu              */
    /* ---------------------------------- */
    .context-menu {
        position: absolute; /* Changed from 'fixed' to 'absolute' */
        background: var(--background-secondary);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        box-shadow: 0 6px 20px var(--shadow-dark);
        z-index: 1000;
        list-style: none;
        padding: 10px 0;
        margin: 0;
        display: none;
        min-width: 200px;
        font-size: 0.9em;
    }

        .context-menu li {
            padding: 12px 20px;
            cursor: pointer;
            transition: background-color 0.2s;
            color: var(--primary-text);
        }

            .context-menu li:hover {
                background-color: #3e4259;
            }

            .context-menu li a {
                text-decoration: none;
                color: inherit;
                display: block;
            }

        .context-menu .disabled {
            color: #555c6d;
            cursor: not-allowed;
            pointer-events: none;
            background-color: transparent;
        }

    .context-description {
        position: absolute; /* Changed from 'fixed' to 'absolute' */
        background: var(--background-secondary);
        color: var(--secondary-text);
        border-radius: 8px;
        padding: 12px;
        box-shadow: 0 2px 10px var(--shadow-dark);
        display: none;
        max-width: 350px;
        font-size: 0.8em;
        line-height: 1.5;
        z-index: 1001;
    }

    /* ---------------------------------- */
    /* Modals                */
    /* ---------------------------------- */
    .modal {
        display: none; /* Changed this line */
        position: fixed;
        z-index: 1002;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.7);
        align-items: center; /* Added this line for vertical centering */
        justify-content: center; /* Added this line for horizontal centering */
        padding: 20px;
    }

    .modal-content {
        background-color: var(--background-secondary);
        color: var(--primary-text);
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 15px 40px var(--shadow-dark);
        width: 100%;
        max-width: 550px;
        position: relative;
    }

        .modal-content h2 {
            margin-top: 0;
            margin-bottom: 25px;
            font-weight: 300;
            color: var(--primary-text);
        }

        .modal-content form {
            display: flex;
            flex-direction: column;
        }

        .modal-content label {
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--secondary-text);
        }

        .modal-content input[type="text"] {
            padding: 14px;
            margin-bottom: 20px;
            border: 1px solid var(--border-color);
            background-color: #2e3146;
            color: var(--primary-text);
            border-radius: 8px;
            font-size: 1em;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

            .modal-content input[type="text"]:focus {
                outline: none;
                border-color: var(--accent-color);
                box-shadow: 0 0 0 3px rgba(75, 128, 232, 0.2);
            }

            .modal-content input[type="text"]::placeholder {
                color: #555c6d;
            }

        .modal-content button[type="submit"] {
            padding: 15px;
            background-color: var(--accent-color);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            margin-top: 20px;
            font-size: 1.1em;
            font-weight: bold;
            transition: background-color 0.2s;
        }

            .modal-content button[type="submit"]:hover {
                background-color: #3e6ecb;
            }

    #deleteModal .modal-content button {
        background-color: #e74c3c;
    }

        #deleteModal .modal-content button:hover {
            background-color: #c0392b;
        }

    .modal .close {
        color: #7a8c9e;
        position: absolute;
        top: 20px;
        right: 30px;
        font-size: 35px;
        font-weight: 300;
        line-height: 1;
        transition: color 0.2s;
    }

        .modal .close:hover,
        .modal .close:focus {
            color: var(--primary-text);
            text-decoration: none;
            cursor: pointer;
        }

    .checkbox-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 20px;
    }

        .checkbox-group label {
            display: flex;
            align-items: center;
            font-weight: normal;
            margin-bottom: 0;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 10px;
            transform: scale(1.2);
        }

    .modal p {
        color: var(--secondary-text);
        font-size: 1em;
    }

    .modal strong {
        color: var(--primary-text);
    }
</style>

<h1 style="margin-bottom: 15px;">Service Pannel</h1>
<div id="services-list" class="dashboard-container">
    @if (ViewData["Services"] is Dictionary<string, Service> services)
    {
        @foreach (var kvp in services)
        {
            var serviceID = kvp.Key;
            var service = kvp.Value;
            var conectionTypeStrings = "";
            if (service.hasWebUI)
            {
                conectionTypeStrings += " WebUI;";
            }
            if (service.canRDP)
            {
                conectionTypeStrings += " RDP;";
            }
            var statusClass = "status-" + service.serviceStatus.ToLower();
            <div class="service-card @statusClass" data-id="@serviceID" data-service-id="@serviceID" data-service-name="@service.serviceName" data-service-ip="@service.IP" data-service-webui="@service.webUI" data-service-has-webui="@service.hasWebUI.ToString().ToLower()" data-service-desc="@service.description" data-service-localnetwork="@service.canRDP.ToString().ToLower()" data-canRemoteAccess="@service.canRemoteAccess.ToString().ToLower()">
                <div>
                    <h2>@service.serviceName</h2>
                    <p><strong>Host:</strong> @service.IP</p>
                    <p>@conectionTypeStrings</p>
                    <p><strong>Status:</strong> <span class="status-text">@service.serviceStatus</span></p>
                </div>
                <div class="status-indicator"></div>
            </div>
        }
    }
    <div id="addServiceCard" class="service-card add-card">
        <div class="add-icon">+</div>
        <p>Add New Service</p>
    </div>
</div>

<ul id="contextMenu" class="context-menu">
    <li id="navToWebUI">Web UI</li>
    <li id="rdp">RDP</li>
    <li id="update">Update</li>
    <li id="delete">Delete</li>
</ul>

<div id="contextDescription" class="context-description"></div>

<div id="addModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Add New Service</h2>
        <form id="addForm" method="post" asp-page-handler="AddService">
            <label for="add-service-name">Service Name:</label>
            <input type="text" id="add-service-name" name="serviceName" required />

            <label for="add-service-desc">Description:</label>
            <input type="text" id="add-service-desc" name="serviceDesc" />

            <label for="add-ip">IP Address:</label>
            <input type="text" id="add-ip" name="ip" required />

            <div class="checkbox-group">
                <label>
                    <input type="checkbox" id="add-local-network" name="localNetwork" /> Can RDP
                </label>
                <label>
                    <input type="checkbox" id="add-has-webui" name="hasWebUI" /> Has Web UI
                </label>
            </div>

            <label for="add-webui">Web UI URL:</label>
            <input type="text" id="add-webui" name="webUI" placeholder="URL will be disabled if 'Has Web UI' isn't checked" />

            <button type="submit">Add Service</button>
        </form>
    </div>
</div>

<div id="updateModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Update Service</h2>
        <form id="updateForm" method="post" asp-page-handler="UpdateService">
            <input type="hidden" id="update-service-id" name="serviceID" />

            <label for="update-service-name">Service Name:</label>
            <input type="text" id="update-service-name" name="serviceName" required />

            <label for="update-service-desc">Description:</label>
            <input type="text" id="update-service-desc" name="serviceDesc" />

            <label for="update-ip">IP Address:</label>
            <input type="text" id="update-ip" name="ip" required />

            <div class="checkbox-group">
                <label>
                    <input type="checkbox" id="update-local-network" name="localNetwork" /> Can RDP
                </label>
                <label>
                    <input type="checkbox" id="update-has-webui" name="hasWebUI" /> Has Web UI
                </label>
            </div>

            <label for="update-webui">Web UI URL:</label>
            <input type="text" id="update-webui" name="webUI" placeholder="URL will be disabled if 'Has Web UI' isn't checked" />

            <button type="submit">Update Service</button>
        </form>
    </div>
</div>

<div id="deleteModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Confirm Delete</h2>
        <p>Are you sure you want to delete <strong id="delete-service-name"></strong>?</p>
        <form id="deleteForm" method="post" asp-page-handler="DeleteService">
            <input type="hidden" id="delete-service-id" name="serviceID" />
            <button type="submit">Delete</button>
        </form>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const contextMenu = document.getElementById('contextMenu');
        const contextDescription = document.getElementById('contextDescription');
        let currentServiceCard = null;

        function toggleWebUIInput(checkboxId, inputId) {
            const checkbox = document.getElementById(checkboxId);
            const input = document.getElementById(inputId);
            input.disabled = !checkbox.checked;
            input.placeholder = checkbox.checked ? '' : 'URL will be disabled if \'Has Web UI\' isn\'t checked';
            input.style.backgroundColor = checkbox.checked ? '#2e3146' : '#1e1e2d';
        }

        function setupModalListeners(modalId, checkboxId, inputId) {
            const hasWebUICheckbox = document.getElementById(checkboxId);

            // Initial state check
            toggleWebUIInput(checkboxId, inputId);

            // Event listener for the checkbox
            hasWebUICheckbox.addEventListener('change', () => {
                toggleWebUIInput(checkboxId, inputId);
            });
        }

        setupModalListeners('addModal', 'add-has-webui', 'add-webui');
        setupModalListeners('updateModal', 'update-has-webui', 'update-webui');

        // Open the Add Service modal
        document.getElementById('addServiceCard').addEventListener('click', () => {
            const addModal = document.getElementById('addModal');
            addModal.style.display = "flex";
        });

        // Handle right-click on service cards
        //isLocalNetwork is if i can access rdp
        document.querySelectorAll('.service-card').forEach(card => {
            card.addEventListener('contextmenu', (e) => {
                if (!card.classList.contains('add-card')) {
                    e.preventDefault();
                    currentServiceCard = e.target.closest('.service-card');
                    const hasWebUI = currentServiceCard.dataset.serviceHasWebui === "true";
                    const localNetwork = currentServiceCard.dataset.serviceLocalnetwork === "true";
                    const serviceDesc = currentServiceCard.dataset.serviceDesc;

                    const navToWebUIItem = document.getElementById('navToWebUI');
                    const rdpItem = document.getElementById('rdp');

                    var isInternalRdp = false;
                    var canAccessWebUI = true;

                    if (localNetwork === true && @ViewData["IsInternalNetwork"] === true) {
                        isInternalRdp = true;
                    }

                    if (hasWebUI === false) {
                        canAccessWebUI = false;
                    }

                    // Toggle the disabled class based on data attributes
                    navToWebUIItem.classList.toggle('disabled', !canAccessWebUI);
                    rdpItem.classList.toggle('disabled', !isInternalRdp);

                    // Position the context menu
                    contextMenu.style.display = 'block';
                    contextMenu.style.left = `${e.pageX}px`;
                    contextMenu.style.top = `${e.pageY}px`;

                    // Show description with dynamic positioning
                    contextDescription.innerText = serviceDesc || 'No description provided.';
                    contextDescription.style.display = 'block';

                    const menuWidth = contextMenu.offsetWidth;
                    const descWidth = contextDescription.offsetWidth;
                    const menuHeight = contextMenu.offsetHeight;
                    const descHeight = contextDescription.offsetHeight;

                    // Calculate position
                    let leftPos = e.pageX + menuWidth + 10;
                    let topPos = e.pageY;

                    // Check if description goes off the right side
                    if (leftPos + descWidth > window.scrollX + window.innerWidth) {
                        leftPos = e.pageX - descWidth - 10;
                    }

                    // Check if description goes off the top
                    if (topPos + descHeight > window.scrollY + window.innerHeight) {
                         topPos = e.pageY + menuHeight - descHeight;
                    }

                    contextDescription.style.left = `${leftPos}px`;
                    contextDescription.style.top = `${topPos}px`;
                }
            });
        });

        // Hide context menu and description on any left-click outside of it
        document.addEventListener('click', (e) => {
            if (!contextMenu.contains(e.target) && contextMenu.style.display === 'block') {
                contextMenu.style.display = 'none';
                contextDescription.style.display = 'none';
            }
        });

        // Context Menu Actions
        document.getElementById('navToWebUI').addEventListener('click', () => {
            if (!document.getElementById('navToWebUI').classList.contains('disabled') && currentServiceCard) {
                const url = currentServiceCard.dataset.serviceWebui;
                if (url) {
                    //hide context menu after opening
                    contextMenu.style.display = 'none';
                    contextDescription.style.display = 'none';
                    window.open(url, '_blank');
                }
            }
        });

        document.getElementById('rdp').addEventListener('click', () => {
            if (!document.getElementById('rdp').classList.contains('disabled') && currentServiceCard) {
                const ip = currentServiceCard.dataset.serviceIp;
                if (ip) {
                    launchRdp(ip);
                }
            }
        });

        document.getElementById('update').addEventListener('click', () => {
            if (currentServiceCard) {
                const modal = document.getElementById('updateModal');
                const serviceID = currentServiceCard.dataset.serviceId;
                const serviceName = currentServiceCard.dataset.serviceName;
                const serviceIp = currentServiceCard.dataset.serviceIp;
                const description = currentServiceCard.dataset.serviceDesc;
                const localNetwork = currentServiceCard.dataset.serviceLocalnetwork === "true";
                const hasWebUI = currentServiceCard.dataset.serviceHasWebui === "true";
                const webUI = currentServiceCard.dataset.serviceWebui;

                document.getElementById('update-service-id').value = serviceID;
                document.getElementById('update-service-name').value = serviceName;
                document.getElementById('update-ip').value = serviceIp;
                document.getElementById('update-service-desc').value = description;
                document.getElementById('update-local-network').checked = localNetwork;
                document.getElementById('update-has-webui').checked = hasWebUI;
                document.getElementById('update-webui').value = webUI;

                modal.style.display = "flex";
                toggleWebUIInput("update-has-webui", "update-webui");

                //hide context menu after opening
                contextMenu.style.display = 'none';
                contextDescription.style.display = 'none';
            }
        });

        document.getElementById('delete').addEventListener('click', () => {
            if (currentServiceCard) {
                const modal = document.getElementById('deleteModal');
                const serviceID = currentServiceCard.dataset.serviceId;
                const serviceName = currentServiceCard.dataset.serviceName;

                document.getElementById('delete-service-id').value = serviceID;
                document.getElementById('delete-service-name').innerText = serviceName;

                modal.style.display = "flex";

                //hide context menu after opening
                contextMenu.style.display = 'none';
                contextDescription.style.display = 'none';
            }
        });

        // Modal Close Functionality
        document.querySelectorAll('.close').forEach(closeBtn => {
            closeBtn.addEventListener('click', (e) => {
                e.target.closest('.modal').style.display = "none";
            });
        });

        // Only close the modal on a click outside of it
        window.onclick = function (event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = "none";
            }
        };

        var el = document.getElementById('services-list'); // make sure your cards container has this ID
        if (!el) return;

        if (@ViewData["isMobile"] === false){
            console.log("Agent is Desktop, Enabling drag-and-drop sorting");
            new Sortable(el, {
                animation: 150,
                filter: ".add-card",
                onEnd: function () {
                    if (confirm("Save new order?")) {
                        let ids = [];
                        document.querySelectorAll("#services-list .service-card").forEach(card => {
                            if (card.dataset.id) { // only push if data-id exists
                                ids.push(card.dataset.id);
                            }
                        })

                        // get antiforgery token from hidden input
                        let token = document.querySelector('#antiforgery-form input[name="__RequestVerificationToken"]').value;

                        fetch('@Url.Page("ServicePannel")?handler=ReorderServices', {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "RequestVerificationToken": token // 👈 important
                            },
                            body: JSON.stringify(ids)
                        }).then(r => {
                            if (r.ok) location.reload();
                            else alert("Failed to save order.");
                        });
                    } else {
                        location.reload();
                    }
                }
            });
        }
        else{
            console.log("Agent is Mobile, Disabling drag-and-drop sorting");
        }
    });

    // Function to generate and download the .rdp file
    function launchRdp(serverIp) {
        // Basic RDP file content. You can add more parameters here.
        const rdpContent = `
            full address:s:${serverIp}
            prompt for credentials:i:1
        `;

        // Create a Blob from the content
        const blob = new Blob([rdpContent], { type: 'application/x-rdp' });

        // Create a link element to trigger the download
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${serverIp}.rdp`; // Name of the downloaded file

        // Programmatically click the link to start the download
        document.body.appendChild(a);
        a.click();

        // Clean up
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
</script>